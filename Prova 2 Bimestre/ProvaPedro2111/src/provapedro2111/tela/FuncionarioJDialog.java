/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package provapedro2111.tela;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import provapedro2111.DAO.FuncionarioDAO;
import provapedro2111.model.Funcionario;

/**
 *
 * @author fag
 */
public class FuncionarioJDialog extends javax.swing.JDialog {
    
    FuncionarioDAO funcionarioDao;

    /**
     * Creates new form FuncionarioJDialog
     */
    public FuncionarioJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        funcionarioDao = new FuncionarioDAO();
        setTfCodigo();
        try {
            carregaTable(funcionarioDao.getAll());
        } catch (SQLException ex) {
            Logger.getLogger(FuncionarioJDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        btSalvar.setEnabled(false);
        tfCodigo.setEnabled(false);
        desabilitaCampos(false);
        habilitaFiltroCodigo();
        tfFiltroCodigo.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgFiltro = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tfCodigo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tfMatricula = new javax.swing.JTextField();
        tfNome = new javax.swing.JTextField();
        btNovo = new javax.swing.JButton();
        btSalvar = new javax.swing.JButton();
        btRemover = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbFuncionario = new javax.swing.JTable();
        rbCodigo = new javax.swing.JRadioButton();
        rbNome = new javax.swing.JRadioButton();
        tfFiltroCodigo = new javax.swing.JTextField();
        tfFiltroNome = new javax.swing.JTextField();
        btFiltrar = new javax.swing.JButton();
        btFiltrarTodos = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de Funcionario");
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });

        jLabel1.setText("Código");

        jLabel2.setText("Nome");

        tfCodigo.setEnabled(false);

        jLabel3.setText("Matrícula");

        btNovo.setText("Novo");
        btNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNovoActionPerformed(evt);
            }
        });

        btSalvar.setText("Salvar");
        btSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSalvarActionPerformed(evt);
            }
        });

        btRemover.setText("Remover");
        btRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRemoverActionPerformed(evt);
            }
        });

        tbFuncionario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nome", "Matrícula"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbFuncionario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbFuncionarioMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbFuncionario);

        bgFiltro.add(rbCodigo);
        rbCodigo.setText("Código");
        rbCodigo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rbCodigoStateChanged(evt);
            }
        });

        bgFiltro.add(rbNome);
        rbNome.setText("Nome");
        rbNome.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rbNomeStateChanged(evt);
            }
        });

        btFiltrar.setText("Filtrar");
        btFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFiltrarActionPerformed(evt);
            }
        });

        btFiltrarTodos.setText("Mostrar Todos");
        btFiltrarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFiltrarTodosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfNome))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfMatricula))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(77, 77, 77)
                                .addComponent(btSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(77, 77, 77)
                                .addComponent(btRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rbNome)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfFiltroNome, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rbCodigo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfFiltroCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btFiltrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btFiltrarTodos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(tfMatricula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tfNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btNovo)
                    .addComponent(btSalvar)
                    .addComponent(btRemover))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbCodigo)
                    .addComponent(tfFiltroCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btFiltrar))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbNome)
                    .addComponent(tfFiltroNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btFiltrarTodos))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNovoActionPerformed
        btSalvar.setText("Salvar");
        limpaCampos();
        novo();
    }//GEN-LAST:event_btNovoActionPerformed

    private void btSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSalvarActionPerformed
        if (validaCampos() == true) {
            salvar();
        }
    }//GEN-LAST:event_btSalvarActionPerformed

    private void btRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRemoverActionPerformed
        remover();
        limpaCampos();
        desabilitaCampos(false);
    }//GEN-LAST:event_btRemoverActionPerformed

    private void tbFuncionarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbFuncionarioMouseClicked
        Funcionario funcionario = new Funcionario();
        try {
            funcionario = funcionarioDao.getById((int) tbFuncionario.getValueAt(tbFuncionario.getSelectedRow(), 0));
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        novo();
        btSalvar.setText("Atualizar");
        tfCodigo.setText(String.valueOf(funcionario.getId()));
        tfNome.setText(funcionario.getNome());
        tfMatricula.setText(String.valueOf(funcionario.getMatricula()));
        btSalvar.setEnabled(true);
        btRemover.setEnabled(true);
    }//GEN-LAST:event_tbFuncionarioMouseClicked

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        if (tfNome.getText().trim().length() > 0
                && tfMatricula.getText().trim().length() > 0) {
            btSalvar.setEnabled(true);
        } else {
            btSalvar.setEnabled(false);
        }
        if (tbFuncionario.getSelectedRow() != -1) {
            btRemover.setEnabled(true);
        } else {
            btRemover.setEnabled(false);
        }
    }//GEN-LAST:event_formMouseMoved

    private void btFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFiltrarActionPerformed
        filtrar();
    }//GEN-LAST:event_btFiltrarActionPerformed

    private void btFiltrarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFiltrarTodosActionPerformed
        try {
            carregaTable(funcionarioDao.getAll());
        } catch (SQLException ex) {
            Logger.getLogger(FuncionarioJDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btFiltrarTodosActionPerformed

    private void rbCodigoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rbCodigoStateChanged
        habilitaFiltroCodigo();
    }//GEN-LAST:event_rbCodigoStateChanged

    private void rbNomeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rbNomeStateChanged
        habilitaFiltroNome();
    }//GEN-LAST:event_rbNomeStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FuncionarioJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FuncionarioJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FuncionarioJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FuncionarioJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FuncionarioJDialog dialog = new FuncionarioJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgFiltro;
    private javax.swing.JButton btFiltrar;
    private javax.swing.JButton btFiltrarTodos;
    private javax.swing.JButton btNovo;
    private javax.swing.JButton btRemover;
    private javax.swing.JButton btSalvar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton rbCodigo;
    private javax.swing.JRadioButton rbNome;
    private javax.swing.JTable tbFuncionario;
    private javax.swing.JTextField tfCodigo;
    private javax.swing.JTextField tfFiltroCodigo;
    private javax.swing.JTextField tfFiltroNome;
    private javax.swing.JTextField tfMatricula;
    private javax.swing.JTextField tfNome;
    // End of variables declaration//GEN-END:variables

    private void limpaCampos() {
        tfCodigo.setText("");
        tfMatricula.setText("");
        tfNome.setText("");
    }

    private void novo() {
        try {
            tfCodigo.setText(String.valueOf(funcionarioDao.getLastId()));
            tfCodigo.setEditable(false);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        desabilitaCampos(true);
        btSalvar.setEnabled(true);
    }

    private boolean validaCampos() {
        if (tfCodigo.getText().trim().length() <= 0) {
            JOptionPane.showMessageDialog(null, "Informe um código para salvar.", "Atenção",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (tfNome.getText().trim().length() <= 0) {
            JOptionPane.showMessageDialog(null, "Informe um nome para salvar.", "Atenção",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (tfMatricula.getText().trim().length() <= 0) {
            JOptionPane.showMessageDialog(null, "Informe uma matrícula para salvar.", "Atenção",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        } 
        return true;
    }

    private void salvar() {
        try {
            Funcionario funcionario = new Funcionario();
            funcionario.setId(Integer.parseInt(tfCodigo.getText().trim()));
            funcionario.setNome(tfNome.getText().trim());
            funcionario.setMatricula(Integer.parseInt(tfMatricula.getText().trim()));
            try {
                if (funcionarioDao.getLastId() == Integer.parseInt(tfCodigo.getText())) {
                    funcionarioDao.save(funcionario);
                } else {
                    funcionarioDao.update(funcionario);
                    btSalvar.setText("Salvar");
                }
                JOptionPane.showMessageDialog(null, "Funcionario Salvo com Sucesso");
                limpaCampos();
                desabilitaCampos(false);
                carregaTable(funcionarioDao.getAll());
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(null, "Caracter Inválido", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void remover() {
        int linhaSelecionada = tbFuncionario.getSelectedRow();
        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(null, "Deve-se selecionar uma linha para ser removido", "Atenção", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int codigoRemover = (int) tbFuncionario.getValueAt(linhaSelecionada, 0);
        try {
            funcionarioDao.delete(codigoRemover);
            JOptionPane.showMessageDialog(null, "Funcionario Removido com Sucesso!");
            carregaTable(funcionarioDao.getAll());
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    private void desabilitaCampos(boolean ativo) {
        tfNome.setEnabled(ativo);
        tfMatricula.setEnabled(ativo);
    }

    private void setTfCodigo() {
        try {
            tfCodigo.setText(String.valueOf(funcionarioDao.getLastId()));
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void carregaTable(List<Funcionario> funcionarioList) {
        if (funcionarioList == null) {
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tbFuncionario.getModel();
        model.setRowCount(0);
        for (Funcionario f : funcionarioList) {
            model.addRow(new Object[]{f.getId(), f.getNome(), f.getMatricula()});
        }
    }

    private void habilitaFiltroCodigo() {
        tfFiltroNome.setText("");
        tfFiltroNome.setEnabled(false);
        tfFiltroCodigo.setEnabled(true);
    }
    
    private void habilitaFiltroNome() {
        tfFiltroCodigo.setText("");
        tfFiltroCodigo.setEnabled(false);
        tfFiltroNome.setEnabled(true);
    }

    private void filtrar() {
        try {
            if (rbCodigo.isSelected() && tfFiltroCodigo.getText().trim().length() > 0) {
                Funcionario funcionario = funcionarioDao.getById(Integer.parseInt(tfFiltroCodigo.getText()));
                List<Funcionario> funcionarioList = new ArrayList<>();
                funcionarioList.add(funcionario);
                carregaTable(funcionarioList);
            } else if (rbNome.isSelected() && tfFiltroNome.getText().trim().length() > 0) {
                carregaTable(funcionarioDao.getByName(tfFiltroNome.getText()));
            } else {
                JOptionPane.showMessageDialog(null, "Informe o filtro desejado para pesquisa", "Atenção", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(null, "Algum campo foi informado incorretamente", null, 0);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}
